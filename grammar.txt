# check examples for more information

program : (statement)*
statement : expr
            | for-stmt
            | while-stmt
            | if-stmt
            | func-def
            | assign-stmt
            | return-stmt
            | continue-stmt
            | break-stmt

# Statements
assign-stmt : (LET)? IDENTIFIER (LBRACE expr RBRACE)? ASSIGN expr

continue-stmt : CONTINUE

break-stmt : BREAK

return-stmt : RETURN expr

for-stmt : FOR (LET)? IDENTIFIER IN expr LBRACE (statement)* RBRACE

while-stmt : WHILE expr LBRACE (statement)* RBRACE

if-stmt : IF compare-expr LBRACE (statement)* RBRACE (ELSE IF compare-expr LBRACE (statement)* RBRACE)* (ELSE LBRACE (statement)* RBRACE)?

func-def : FUNC IDENTIFIER LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN LBRACE (statement)* RBRACE

expr : compare-expr (AND|OR compare-expr)*

compare-expr : NOT compare-expr
             | arith_expr ((EQ|NEQ|GT|LT|GTE|LTE) arith-expr)*
             | arith_expr (IN arith-expr)?

arith-expr : term ((PLUS|MINUS) term)*


term : factor ((MUL|DIV) factor)*

factor : (PLUS|MINUS) factor
       |  power

power : call (POW factor)*

call : atom (LPAREN expr (COMMA expr)* RPAREN)?

atom : INT
     | FLOAT
     | STRING
     | list
     | LPAREN expr RPAREN
     | IDENTIFIER
     | IDENTIFIER LPAREN (expr (COMMA expr)*)? RPAREN
     | IDENTIFIER LBRACKET expr RBRACKET
     | IDENTIFIER (DOT IDENTIFIER (LPAREN expr (COMMA expr)* RPAREN)?)*


# Data types
list : LBRACKET (expr (COMMA expr)*)? RBRACKET